#version 450 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0)                     uniform sampler2D inputImage;
layout(r11f_g11f_b10f, binding = 1)     uniform image2D outputImage;

layout(std140, binding = 7) uniform BloomSettings 
{
	//float threshold, intensity;
    bool filterImage;
    int currentMipLevel;
    //vec2 texelSize;
};


vec2 vectorDivide(ivec2 v1, vec2 v2)
{
    return vec2(float(v1.x) / float(v2.x), float(v1.y) / float(v2.y));
}
void main()
{
    ivec2 texelCoordsInputImage = ivec2(gl_GlobalInvocationID.xy / 2);
    
    ivec2 texels = ivec2(gl_NumWorkGroups.xy) / 2;
    vec2 texelSize = 1.0 / (vec2(texels) - vec2(0.0));
    
    vec4 samples[9];
    
    //for (int s = 0; s < 2; s++)
    {
    
        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                ivec2 coords = ivec2(texelCoordsInputImage.x + j, texelCoordsInputImage.y - i);
                vec2 tC = texelSize * vec2(coords.x + 0.5, coords.y + 0.5);
            
                int x = j + 1;
                int y = i + 1;
            
                //samples[(3 * y) + x] = imageLoad(inputImage, coords, s);
                samples[(3 * y) + x] = textureLod(inputImage, tC, currentMipLevel);
            }
        }
    
        vec4 finalColor = vec4(0.0);
    
        finalColor += samples[4] * 4.0;
    
        for (int i = 1; i <= 7; i += 2)
            finalColor += samples[i] * 2.0;
    
        for (int i = 2; i <= 8; i += 2)
        {
            if (i == 4)
                continue;
            finalColor += samples[i];
        }
    
        finalColor *= 1.0 / 16.0;
    
        finalColor += imageLoad(outputImage, ivec2(gl_GlobalInvocationID.xy));
    
        imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), finalColor);
    }
}